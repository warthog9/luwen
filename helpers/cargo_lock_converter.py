#!/usr/bin/env python3
"""
Cargo.lock Version 4 to 3 Converter

This script converts Cargo.lock files from version 4 format to version 3 format.
The main differences are in dependency structure and metadata format.
"""

import sys
import re
from pathlib import Path
from typing import Dict, List, Any

def parse_cargo_lock(content: str) -> Dict[str, Any]:
    """Parse Cargo.lock content into a structured format."""
    lines = content.strip().split('\n')
    result = {'packages': []}
    current_package = None
    current_deps = []
    
    i = 0
    while i < len(lines):
        line = lines[i].strip()
        
        if line.startswith('version = ') and current_package is None:
            # This is the top-level version, not a package version
            result['version'] = int(line.split('=')[1].strip())
        elif line == '[[package]]':
            if current_package:
                if current_deps:
                    current_package['dependencies'] = current_deps
                result['packages'].append(current_package)
            current_package = {}
            current_deps = []
        elif line.startswith('name = '):
            current_package['name'] = line.split('=')[1].strip().strip('"')
        elif current_package is not None and line.startswith('version = '):
            current_package['version'] = line.split('=')[1].strip().strip('"')
        elif line.startswith('source = '):
            current_package['source'] = line.split('=')[1].strip().strip('"')
        elif line.startswith('checksum = '):
            current_package['checksum'] = line.split('=')[1].strip().strip('"')
        elif line == 'dependencies = [':
            # Parse dependencies array
            i += 1
            while i < len(lines) and not lines[i].strip() == ']':
                dep_line = lines[i].strip()
                if dep_line and not dep_line.startswith('#'):
                    # Remove trailing comma and quotes, handle both quoted and unquoted
                    dep = dep_line.rstrip(',').strip()
                    if dep.startswith('"') and dep.endswith('"'):
                        dep = dep[1:-1]  # Remove quotes
                    if dep:
                        current_deps.append(dep)
                i += 1
        
        i += 1
    
    # Add last package
    if current_package:
        if current_deps:
            current_package['dependencies'] = current_deps
        result['packages'].append(current_package)
    
    return result

def convert_dependencies_v4_to_v3(deps: List[str]) -> List[str]:
    """Convert version 4 dependency format to version 3."""
    converted = []
    
    for dep in deps:
        # Handle complex dependency specifications in v4
        # Convert them to simple "name version" format for v3
        if ' ' in dep and not dep.startswith('{'):
            # Already in simple format
            converted.append(dep)
        else:
            # Extract name and version from complex format
            # This is a simplified conversion - real implementation might need more parsing
            match = re.search(r'(\w+)\s+([\d.]+)', dep)
            if match:
                name, version = match.groups()
                converted.append(f"{name} {version}")
            else:
                converted.append(dep)  # Keep as-is if can't parse
    
    return converted

def format_cargo_lock_v3(data: Dict[str, Any]) -> str:
    """Format the data structure back to Cargo.lock v3 format."""
    lines = [
        "# This file is automatically @generated by Cargo.",
        "# It is not intended for manual editing.",
        "version = 3",
        ""
    ]
    
    for package in data['packages']:
        lines.append("[[package]]")
        lines.append(f'name = "{package["name"]}"')
        lines.append(f'version = "{package["version"]}"')
        
        if 'source' in package:
            lines.append(f'source = "{package["source"]}"')
        
        if 'dependencies' in package and package['dependencies']:
            lines.append("dependencies = [")
            converted_deps = convert_dependencies_v4_to_v3(package['dependencies'])
            for dep in converted_deps:
                lines.append(f' "{dep}",')
            lines.append("]")
        
        # Note: Version 3 uses different checksum format, so we omit it
        # The checksum will be regenerated when cargo runs
        
        lines.append("")  # Empty line between packages
    
    return '\n'.join(lines)

def convert_cargo_lock(input_path: str, output_path: str) -> None:
    """Convert Cargo.lock from version 4 to version 3."""
    try:
        # Read input file
        with open(input_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Parse the content
        data = parse_cargo_lock(content)
        
        # Check version
        if data.get('version') != 4:
            raise ValueError(f"Expected version 4, got version {data.get('version')}")
        
        # Convert to version 3
        data['version'] = 3
        
        # Format as version 3
        output_content = format_cargo_lock_v3(data)
        
        # Write output file
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(output_content)
        
        print(f"Successfully converted {input_path} to {output_path}")
        
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)

def main():
    if len(sys.argv) != 3:
        print(f"Usage: {sys.argv[0]} <input_cargo_lock> <output_cargo_lock>", file=sys.stderr)
        sys.exit(1)
    
    input_path = sys.argv[1]
    output_path = sys.argv[2]
    
    if not Path(input_path).exists():
        print(f"Error: Input file {input_path} does not exist", file=sys.stderr)
        sys.exit(1)
    
    convert_cargo_lock(input_path, output_path)

if __name__ == "__main__":
    main()

# Example usage:
# python3 cargo_lock_converter.py Cargo.lock Cargo.lock.v3
